generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  username            String    @unique
  email               String    @unique
  password            String
  pendingEmail        String?   @unique
  isEmailVerified     Boolean   @default(false)
  isBanned            Boolean   @default(false)
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  // Additional fields optional
  avatarUrl           String?
  displayName         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userRoles     UserRoles[]
  sessions      Session[]
  verifications Verification[]

  @@index([email, isBanned])
  @@index([lockedUntil])
  @@map("users")
}

model Session {
  id            String   @id @default(uuid())
  userId        String
  tokenHash     String   @unique
  csrfTokenHash String   @unique
  isRevoked     Boolean  @default(false)
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ipAddress     String?
  locationData  Json?    @map("location")
  deviceData    Json?    @map("device")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([isRevoked])
  @@index([ipAddress])
  @@map("sessions")
}

model Verification {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  type      String // e.g. "EMAIL", "PASSWORD_RESET"
  metadata  Json?
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verifications")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String[] // e.g. ["CAN_BAN_USER", "CAN_EDIT_ARTICLES"]

  userRoles UserRoles[]
}

model UserRoles {
  id     String @id @default(uuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}
