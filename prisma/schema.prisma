generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  username            String    @unique
  email               String    @unique
  passwordHash        String
  pendingEmail        String?   @unique
  isEmailVerified     Boolean   @default(false)
  isBanned            Boolean   @default(false)
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  avatarUrl           String?
  displayName         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userRoles       UserRoles[]
  sessions        Session[]
  verifications   Verification[]
  passwordHistory PasswordHistory[]
  invitations     Invitation[]

  @@index([email, isBanned])
  @@index([email, isEmailVerified])
  @@index([username])
  @@index([lockedUntil])
  @@map("users")
}

model Session {
  id            String   @id @default(uuid())
  userId        String
  tokenHash     String   @unique
  csrfTokenHash String   @unique
  isRevoked     Boolean  @default(false)
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ipAddress     String?
  metadata      Json? // Contains location, device, and fingerprint data

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([isRevoked])
  @@index([ipAddress])
  @@index([userId])
  @@map("sessions")
}

enum VerificationType {
  COMPLETE_EMAIL_CHANGE
  COMPLETE_PASSWORD_RESET
  COMPLETE_EMAIL_VERIFICATION
  COMPLETE_ACCOUNT_DELETION
}

model Verification {
  id        String           @id @default(uuid())
  userId    String
  token     String           @unique
  type      VerificationType
  metadata  Json?
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verifications")
}

model PasswordHistory {
  id           String   @id @default(uuid())
  userId       String
  passwordHash String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("password_history")
}

model Invitation {
  id        String   @id @default(uuid())
  email     String   @unique
  inviterId String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inviter User @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions String[]

  userRoles UserRoles[]
}

model UserRoles {
  id     String @id @default(uuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}
